@page "/adults"

@using FamiliesManager.Models
@using FamiliesManager.Data

@inject IAdultService AdultService
@inject NavigationManager NavigationManager

<h3>The adults</h3>
<hr/>

<div class="row p-3">
    <div class="col-4">
        Filter by Id :
        <input class="form-control form-control-md" type="number" @oninput="@(FilterById)"/>
    </div>
    <div class="col-4">
        Filter by Name :
        <input class="form-control form-control-md" type="text" @oninput="@(FilterByName)"/>
    </div>
    <div class="col-4">
        Filter by Job Title :
        <input class="form-control form-control-md" type="text" @oninput="@(FilterByJobTitle)"/>
    </div>
</div>

@if (_shownAdults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_shownAdults.Any())
{
    <p>
        <em>List is empty. Please add some data.</em>
    </p>
}
else
{
    <div class="row">
        @foreach (var adult in _shownAdults)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mb-3">
                <div class="card text-center">
                    <div class="member-card">
                        <span class="float-left m-3 text-secondary position-absolute">#@adult.Id</span>
                        <div class="card-header p-3">
                            <span class="rounded-circle oi oi-person" style="font-size: 50px;"></span>
                            <h4>@adult.FirstName @adult.LastName</h4>
                            <p class="text-muted">
                                @if (adult.Sex.Equals("M"))
                                {
                                    <span>Male </span>
                                }
                                else
                                {
                                    <span>Female </span>
                                }
                                @adult.Age
                            </p>
                        </div>
                        <div class="card-body">
                            <h3 class="card-title">@adult.JobTitle.JobTitle</h3>
                            <p class="card-text"><span class="font-weight-light">Salary:</span> @adult.JobTitle.Salary dkk/month</p>

                            <hr/>
                            <label class="text-muted"> Personal Information </label>
                            <p class="m-0">@adult.Weight kg | @adult.Height cm</p>
                            <p class=" m-0"><span class="font-weight-light">Eyes:</span> @adult.EyeColor | <span class="font-weight-light">Hair:</span> @adult.HairColor</p>
                        </div>
                        <div class="card-footer">
                            <AuthorizeView Policy="MustBeAdmin">
                                <button @onclick="@(() => Remove(adult.Id))">
                                    <i class="oi oi-trash" style="color: firebrick"></i>
                                </button>
                            </AuthorizeView>
                            <AuthorizeView Policy="MustBeManagerOrAdmin">
                                <button @onclick="@(() => Edit(adult.Id))">
                                    <i class="oi oi-pencil" style="color: #1b6ec2"></i>
                                </button>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IList<Adult> _allAdults;
    private IList<Adult> _shownAdults;


    private int? _filterById;
    private string _filterByName;
    private string _filterByJobTitle;

    private void FilterById(ChangeEventArgs evt)
    {
        _filterById = null;
        try
        {
            if (evt.Value != null)
                _filterById = int.Parse(evt.Value.ToString() ?? string.Empty);
        }
        catch (Exception e)
        {
            // ignored
        }

        ExecuteFilter();
    }

    private void FilterByName(ChangeEventArgs evt)
    {
        _filterByName = null;
        if (evt.Value != null && evt.Value?.ToString() != "")
        {
            _filterByName = evt.Value?.ToString();
        }

        ExecuteFilter();
    }

    private void FilterByJobTitle(ChangeEventArgs evt)
    {
        _filterByJobTitle = null;
        if (evt.Value != null && evt.Value?.ToString() != "")
        {
            _filterByJobTitle = evt.Value?.ToString();
        }
        Console.WriteLine(_filterByJobTitle);
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        _shownAdults = _allAdults.Where(adult =>
            (_filterById != null && adult.Id == _filterById || _filterById == null) &&
            (_filterByName != null && (adult.LastName.ToLower().StartsWith(_filterByName.ToLower()) || adult.FirstName.ToLower().StartsWith(_filterByName.ToLower())) || _filterByName == null) &&
            (_filterByJobTitle != null && adult.JobTitle.JobTitle.ToLower().StartsWith(_filterByJobTitle.ToLower()) || _filterByJobTitle == null)
            ).ToList();
    }

    private async Task Remove(int id)
    {
        try
        {
            Adult toRemove = _allAdults.First(ad => ad.Id == id);
            _allAdults.Remove(toRemove);
            _shownAdults.Remove(toRemove);
            await AdultService.DeleteAsync(id);
        }
        catch (Exception e)
        {
    // update some error label here, or show popup..
        }
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _allAdults = await AdultService.ReadAllAsync();
            _shownAdults = _allAdults;
        }
        catch (Exception e)
        {
    // update some error label here, or show popup..
        }
    }

}